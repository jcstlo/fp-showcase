version: "3.9"

# IMPORTANT: Copy the contents of this file to docker-compose-prod.yml
#            then carefully review and change the environment variables
#            appropriately!

# NOTE: Lines with __REPLACE_ME__ need to be replaced appropriately.
#       If using Amazon S3 for user-uploaded images, set DJANGO_USE_S3 to True.
#       Otherwise, images will be stored in a local Docker volume (media_volume).

services:
  web:
    build: .
    expose:
      - 8000
    command: gunicorn fp_showcase.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
      - media_volume:/code/media
    depends_on:
      - db
    environment:
      # in a Python REPL, run "import secrets; print(secrets.token_urlsafe(38))" to generate a value for DJANGO_SECRET_KEY
      - "DJANGO_SECRET_KEY=__REPLACE_ME__"
      - "DJANGO_SECURE_PROXY_SSL_HEADER=True"
      - "VIRTUAL_PORT=8000"
      # e.g. "DJANGO_ALLOWED_HOSTS=fountainpenshowcase.com" 
      - "DJANGO_ALLOWED_HOSTS=__REPLACE_ME__"
      # e.g. "VIRTUAL_HOST=fountainpenshowcase.com" 
      - "VIRTUAL_HOST=__REPLACE_ME__"
      # e.g. "LETSENCRYPT_HOST=fountainpenshowcase.com" 
      - "LETSENCRYPT_HOST=__REPLACE_ME__"
      # e.g. "CSRF_TRUSTED_ORIGINS=https://fountainpenshowcase.com" 
      - "CSRF_TRUSTED_ORIGINS=__REPLACE_ME__"
      # set DJANGO_USE_S3 to True to store user-uploaded images to an existing S3 bucket
      - "DJANGO_USE_S3=False"
      # only replace AWS_ACCESS_KEY_ID if DJANGO_USE_S3 = True
      - "AWS_ACCESS_KEY_ID=__REPLACE_ME__"
      # only replace AWS_SECRET_ACCESS_KEY if DJANGO_USE_S3 = True
      - "AWS_SECRET_ACCESS_KEY=__REPLACE_ME__"
      # only replace AWS_STORAGE_BUCKET_NAME if DJANGO_USE_S3 = True
      - "AWS_STORAGE_BUCKET_NAME=__REPLACE_ME__"
      # set DJANGO_FPS_DEMO = True if you want to disable AWS S3 and add a demo notice button to the header
      - "DJANGO_FPS_DEMO=False"
      # only replace with existing profile username if DJANGO_FPS_DEMO = True
      - "DJANGO_FPS_DEMO_PROFILE=__REPLACE_ME__"
      # replace admin path with something safer, e.g. "DJANGO_CUSTOM_ADMIN_PATH=anythingbutadmin"
      - "DJANGO_CUSTOM_ADMIN_PATH=__REPLACE_ME__"
  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/media
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - web
  acme-companion:
    image: nginxproxy/acme-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    environment:
      - "NGINX_PROXY_CONTAINER=nginx-proxy"
      # e.g. "DEFAULT_EMAIL=someuser@email.com"
      - "DEFAULT_EMAIL=__REPLACE_ME__"
      # comment out ACME_CA_URI when you want to use Let's Encrypt's production environment
      # see README.md for more details
      - "ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory"
    depends_on:
      - nginx-proxy
volumes:
  postgres_data:
  static_volume:
  media_volume:
  certs:
  html:
  vhost:
  acme: